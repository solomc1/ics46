// Submitter: ayi3(Yi, Annie)
// Partner  : solomc1(Chan, Solomon)
// We certify that we worked cooperatively on this programming
//   assignment, according to the rules for pair programming

#include <string>
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <limits>                    //Biggest int: std::numeric_limits<int>::max()
#include "ics46goody.hpp"
#include "array_queue.hpp"
#include "array_priority_queue.hpp"
#include "array_set.hpp"
#include "array_map.hpp"


typedef ics::ArrayQueue<std::string>              CandidateQueue;
typedef ics::ArraySet<std::string>                CandidateSet;
typedef ics::ArrayMap<std::string,int>            CandidateTally;

typedef ics::ArrayMap<std::string,CandidateQueue> Preferences;
typedef ics::pair<std::string,CandidateQueue>     PreferencesEntry;

bool gt_alphabetic(const PreferencesEntry& a, const PreferencesEntry& b){
	return a.first < b.first;
}

typedef ics::ArrayPriorityQueue<PreferencesEntry,gt_alphabetic> PreferencesEntryPQ; //Must supply gt at construction

typedef ics::pair<std::string,int>                TallyEntry;

bool gt_entry_alphabetic(const TallyEntry& a, const TallyEntry& b){
	return a.first < b.first;
}

bool gt_entry_numeric(const TallyEntry& a, const TallyEntry& b){
	return a.second > b.second;
}

typedef ics::ArrayPriorityQueue<TallyEntry>       TallyEntryPQ;


//Read an open file stating voter preferences (each line is (a) a voter
//  followed by (b) all the candidates the voter would vote for, in
//  preference order (from most to least preferred candidate, separated
//  by semicolons), and return a Map of preferences: a Map whose keys are
//  voter names and whose values are a queue of candidate preferences.
Preferences read_voter_preferences(std::ifstream &file) {
	Preferences prefs;
	std::string line;
	while(getline(file,line)){
		std::vector<std::string> chars = ics::split(line,";");
		CandidateQueue candidates;
		for(int i = 1; i < chars.size(); i++){
			candidates.enqueue(chars[i]);
		}
		prefs[chars[0]] = candidates;
	}
	file.close();
	return prefs;
}


//Print a label and all the entries in the preferences Map, in alphabetical
//  order according to the voter.
//Use a "->" to separate the voter name from the Queue of candidates.
void print_voter_preferences(const Preferences& preferences) {
	PreferencesEntryPQ pq;
	pq.enqueue_all(preferences);
	std::cout << "Voter Preferences" << std::endl;
	for(auto const& entry : pq)
		std::cout << "  " << entry.first << " -> " << entry.second << std::endl;

}


//Print the message followed by all the entries in the CandidateTally, in
//  the order specified by has_higher_priority: i is printed before j, if
//  has_higher_priority(i,j) returns true: sometimes alphabetically by candidate,
//  other times by decreasing votes for the candidate.
//Use a "->" to separate the candidat name from the number of votes they
//  received.
void print_tally(std::string message, const CandidateTally& tally, bool (*has_higher_priority)(const TallyEntry& i,const TallyEntry& j)) {
	std::cout << message << std::endl;


}


//Return the CandidateTally: a Map of candidates (as keys) and the number of
//  votes they received, based on the unchanging Preferences (read from the
//  file) and the candidates who are currently still in the election (which changes).
//Every possible candidate should appear as a key in the resulting tally.
//Each voter should tally one vote: for their highest-ranked candidate who is
//  still in the the election.
CandidateTally evaluate_ballot(const Preferences& preferences, const CandidateSet& candidates) {
	CandidateTally ct;
	ct.put_all(candidates);
	for(auto c: ct)
		std::cout << c.first << " -> " << std::endl;

	return ct;
}


//Return the Set of candidates who are still in the election, based on the
//  tally of votes: compute the minimum number of votes and return a Set of
//  all candidates receiving more than that minimum; if all candidates
//  receive the same number of votes (that would be the minimum), the empty
//  Set is returned.

//CandidateSet remaining_candidates(const CandidateTally& tally) {
//}


//Prompt the user for a file, create a voter preference Map, and print it.
//Determine the Set of all the candidates in the election, from this Map.
//Repeatedly evaluate the ballot based on the candidates (still) in the
//  election, printing the vote count (tally) two ways: with the candidates
//  (a) shown alphabetically increasing and (b) shown with the vote count
//  decreasing (candidates with equal vote counts are shown alphabetically
//  increasing); from this tally, compute which candidates remain in the
//  election: all candidates receiving more than the minimum number of votes;
//  continue this process until there are less than 2 candidates.
//Print the final result: there may 1 candidate left (the winner) or 0 left
//   (no winner).
int main() {
  try {
	  std::ifstream file;
	  std::cout << "HELLO";
//	  ics::safe_open(file, "Enter the name of a file with a graph", "votepref1.txt");
//	  Preferences preferences = read_voter_preferences(file);
//	  print_voter_preferences(preferences);
//	  CandidateSet remaining;
//	  remaining.insert_all(preferences);
//	  std::cout<<remaining<<std::endl;
//	  evaluate_ballot(preferences,remaining);
	  //print_tally("hello", preferences, *gt_alphabetic);


  } catch (ics::IcsError& e) {
    std::cout << e.what() << std::endl;
  }
  return 0;
}
